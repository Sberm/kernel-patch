this is a cycle
			enter
           a.out-340655  [003] ...21 24664.942345: bpf_trace_printk: [debug] sys enter 3 0000000000000000 00000000c2374a28
           a.out-340655  [003] ...21 24664.942347: bpf_trace_printk: unaugmented func pid:340655

			exit
           a.out-340655  [003] ...21 24664.942355: bpf_trace_printk: exiting mypid:340655 workpid:340655
           a.out-340655  [003] ...21 24664.942356: bpf_trace_printk: exiting... sysnr:445
           a.out-340655  [003] ...21 24664.942358: bpf_trace_printk: unaugmented func pid:340655

; return 1;
   6: (b7) r0 = 1
   7: (95) exit

what is this? .......


evsel__init_raw_syscall_tp
	evsel__syscall_tp

#0  evsel__init_raw_syscall_tp (evsel=0x5555561ba520,
    handler=0x5555556762af <trace__sys_enter>)
    at builtin-trace.c:520
#1  0x000055555566c14f in perf_evsel__raw_syscall_newtp (
    direction=0x55555595fef3 "sys_enter",
    handler=0x5555556762af <trace__sys_enter>)
    at builtin-trace.c:549
#2  0x00005555556794a9 in trace__add_syscall_newtp (
    trace=0x7fffffffb180) at builtin-trace.c:3655
#3  0x0000555555680087 in cmd_trace (argc=1, argv=0x7fffffffeb30)
    at builtin-trace.c:5648
#4  0x0000555555686958 in run_builtin (
    p=0x555556126fe8 <commands+648>, argc=5, argv=0x7fffffffeb30)
    at perf.c:351
--Type <RET> for more, q to quit, c to continue without paging--
#5  0x0000555555686c03 in handle_internal_command (argc=5,
    argv=0x7fffffffeb30) at perf.c:404
#6  0x0000555555686d64 in run_argv (argcp=0x7fffffffe91c,
    argv=0x7fffffffe910) at perf.c:448
#7  0x00005555556870b5 in main (argc=5, argv=0x7fffffffeb30)
    at perf.c:556

trace__add_syscall_newtp
  perf_evsel__raw_syscall_newtp 
    evsel__init_raw_syscall_tp

	augmented_raw_syscalls_bpf__attach(trace.skel);
	HERE-> trace__add_syscall_newtp(&trace);
}




#0  0x000055555566b7f8 __tp_field__init_uint (field=0x0,
    size=8, offset=8, needs_swap=false) at builtin-trace.c:297
#1  0x000055555566b8fd tp_field__init_uint (field=0x0,
    format_field=0x5555561c3660, needs_swap=false)
    at builtin-trace.c:323
#2  0x000055555566bd1b in evsel__init_tp_uint_field (
    evsel=0x5555561ba520, field=0x0, name=0x55555595fff6 "id")
    at builtin-trace.c:445
#3  0x000055555566c089 in evsel__init_raw_syscall_tp (
    evsel=0x5555561ba520,
    handler=0x5555556762af <trace__sys_enter>)
    at builtin-trace.c:521
#4  0x000055555566c14f in perf_evsel__raw_syscall_newtp (
    direction=0x55555595fef3 "sys_enter",
--Type <RET> for more, q to quit, c to continue without paging--
    handler=0x5555556762af <trace__sys_enter>)
    at builtin-trace.c:549
#5  0x00005555556794a9 in trace__add_syscall_newtp (
    trace=0x7fffffffb180) at builtin-trace.c:3655
#6  0x0000555555680087 in cmd_trace (argc=1, argv=0x7fffffffeb30)
    at builtin-trace.c:5648
#7  0x0000555555686958 in run_builtin (
    p=0x555556126fe8 <commands+648>, argc=5, argv=0x7fffffffeb30)
    at perf.c:351
#8  0x0000555555686c03 in handle_internal_command (argc=5,
    argv=0x7fffffffeb30) at perf.c:404
#9  0x0000555555686d64 in run_argv (argcp=0x7fffffffe91c,
    argv=0x7fffffffe910) at perf.c:448
#10 0x00005555556870b5 in main (argc=5, argv=0x7fffffffeb30)
--Type <RET> for more, q to quit, c to continue without paging--
    at perf.c:556

trace__add_syscall_newtp
  perf_evsel__raw_syscall_newtp
   evsel__init_raw_syscall_tp
    evsel__init_tp_uint_field
	 tp_field__init_uint
		__tp_field__init_uint
		  field->offset = offset


struct perf_event_attr attr = {
	.type	       = PERF_TYPE_TRACEPOINT,
	.sample_type   = (PERF_SAMPLE_RAW | PERF_SAMPLE_TIME |
			PERF_SAMPLE_CPU | PERF_SAMPLE_PERIOD),
};

[1]
[2]
[3]
[4]
 14003.061 (         ): a.out/1236095 landlock_add_rule(ruleset_fd: 14, rule_type: LANDLOCK_RULE_PATH_BENEATH, rule_attr: 0x7ffcf1118c08, flags: 45) ...
[4.1]
[4.2]
[4.3]
[4.4]
[4.5]
[5]
[6]

trace__printf_interrupted_entry

why is there no exit event?

           a.out-1291912 [000] ...21 133946.433103: bpf_trace_printk: exiting mypid:1291912 workpid:1292103
           a.out-1292103 [004] ...21 133946.870573: bpf_trace_printk: exiting mypid:1292103 workpid:1291912
           a.out-1292103 [004] ...21 133946.870583: bpf_trace_printk: exiting mypid:1292103 workpid:1292103
           a.out-1292103 [004] ...21 133946.870601: bpf_trace_printk: exiting mypid:1292103 workpid:1291912
why is this the case, when I don't filter the pid, it will be normal?


4 by 4
           a.out-1792317 [007] ...21 195153.813317: bpf_trace_printk: [enter]curpid:1792317 workpid:1792317
           a.out-1792318 [003] ...21 195153.813317: bpf_trace_printk: [enter]curpid:1792318 workpid:1792317
           a.out-1792318 [003] ...21 195153.813320: bpf_trace_printk: [enter]curpid:1792318 workpid:1792318
           a.out-1792317 [007] ...21 195153.813323: bpf_trace_printk: [enter]curpid:1792317 workpid:1792318

BA
AA
AB
BB
           a.out-1792318 [003] ...21 195227.841612: bpf_trace_printk: [enter]curpid:1792318 workpid:1792317
           a.out-1792317 [007] ...21 195227.841612: bpf_trace_printk: [enter]curpid:1792317 workpid:1792317
           a.out-1792317 [007] ...21 195227.841619: bpf_trace_printk: [enter]curpid:1792317 workpid:1792318
           a.out-1792318 [003] ...21 195227.841627: bpf_trace_printk: [enter]curpid:1792318 workpid:1792318

AA
BA
AB
BB
           a.out-1792317 [007] ...21 195228.842149: bpf_trace_printk: [enter]curpid:1792317 workpid:1792317
           a.out-1792318 [003] ...21 195228.842150: bpf_trace_printk: [enter]curpid:1792318 workpid:1792317
           a.out-1792317 [007] ...21 195228.842156: bpf_trace_printk: [enter]curpid:1792317 workpid:1792318
           a.out-1792318 [003] ...21 195228.842165: bpf_trace_printk: [enter]curpid:1792318 workpid:1792318

AA
BA
AB
BB
           a.out-1792317 [007] ...21 195229.842693: bpf_trace_printk: [enter]curpid:1792317 workpid:1792317
           a.out-1792318 [003] ...21 195229.842693: bpf_trace_printk: [enter]curpid:1792318 workpid:1792317
           a.out-1792317 [007] ...21 195229.842699: bpf_trace_printk: [enter]curpid:1792317 workpid:1792318
           a.out-1792318 [003] ...21 195229.842709: bpf_trace_printk: [enter]curpid:1792318 workpid:1792318

AA
BA
AB
BB
           a.out-1792317 [007] ...21 195230.843011: bpf_trace_printk: [enter]curpid:1792317 workpid:1792317
           a.out-1792318 [003] ...21 195230.843011: bpf_trace_printk: [enter]curpid:1792318 workpid:1792317
           a.out-1792317 [007] ...21 195230.843018: bpf_trace_printk: [enter]curpid:1792317 workpid:1792318
           a.out-1792318 [003] ...21 195230.843025: bpf_trace_printk: [enter]curpid:1792318 workpid:1792318

AA
BA
BB
AB
           a.out-1792317 [007] ...21 195231.843223: bpf_trace_printk: [enter]curpid:1792317 workpid:1792317
           a.out-1792318 [003] ...21 195231.843223: bpf_trace_printk: [enter]curpid:1792318 workpid:1792317
           a.out-1792318 [003] ...21 195231.843230: bpf_trace_printk: [enter]curpid:1792318 workpid:1792318
           a.out-1792317 [007] ...21 195231.843238: bpf_trace_printk: [enter]curpid:1792317 workpid:1792318

BA
AA
AB
BB
           a.out-1792318 [003] ...21 195232.843508: bpf_trace_printk: [enter]curpid:1792318 workpid:1792317
           a.out-1792317 [007] ...21 195232.843508: bpf_trace_printk: [enter]curpid:1792317 workpid:1792317
           a.out-1792317 [007] ...21 195232.843514: bpf_trace_printk: [enter]curpid:1792317 workpid:1792318
           a.out-1792318 [003] ...21 195232.843523: bpf_trace_printk: [enter]curpid:1792318 workpid:1792318

BA AA AA AA AA BA
AA BA BA BA BA AA
AB AB AB AB BB AB
BB BB BB BB AB BB

AA BA, AB BB
ends with A, ends with B

           a.out-1792317 [007] ...21 195517.951405: bpf_trace_printk: [enter]curpid:1792317 workpid:1792317 BPF prog1
           a.out-1792317 [007] ...21 195517.951419: bpf_trace_printk: [enter]curpid:1792317 workpid:1796835 BPF prog2
		   ...0.5ms
           a.out-1796835 [007] ...21 195518.171071: bpf_trace_printk: [enter]curpid:1796835 workpid:1792317 BPF prog1
           a.out-1796835 [007] ...21 195518.171084: bpf_trace_printk: [enter]curpid:1796835 workpid:1796835 BPF prog2

with task filtering, a better result:
           a.out-1799549 [000] ...21 195686.658265: bpf_trace_printk: [enter]curpid:1799549 workpid:1799549
           a.out-1799548 [003] ...21 195686.658300: bpf_trace_printk: [enter]curpid:1799548 workpid:1799548

why return -1?
what is return 1?
reason is the hardest

we want:
the task to go through it

there is:
either the task go through without filtering, or return 0 so that the syscall is terminated

how is the current pid filtering with -p done?

we ARE trying to improve the workload...
Idk why -p doesn't have any effect, but workload does...

works when two perf instances tracing the same process: sudo /tmp/perf/perf trace -e openat -p 1906342
doesn't work when two perf instances tracing two different processes: sudo /tmp/perf/perf trace -e landlock_add_rule -- /home/howard/hw/cabinet/a.out

sure enough, tracing two processes doesn't work:
sudo /tmp/perf/perf trace -e openat -p 1988151
sudo /tmp/perf/perf trace -e openat -p 1906342

they are tracepoints.
  raw_syscalls:sys_enter                             [Tracepoint event]
  raw_syscalls:sys_exit                              [Tracepoint event]

why?

$ sudo /tmp/perf/perf trace -vv -e openat -p 1906342
[sudo] password for howard:
perf pid 2011699
Using CPUID GenuineIntel-6-8E-A
------------------------------------------------------------
perf_event_attr:
  type                             2 (PERF_TYPE_TRACEPOINT)
  size                             136
  config                           0x16e (raw_syscalls:sys_enter)
  { sample_period, sample_freq }   1
  sample_type                      IP|TID|TIME|ID|CPU|PERIOD|RAW
  read_format                      ID|LOST
  disabled                         1
  inherit                          1
  mmap                             1
  comm                             1
  task                             1
  sample_id_all                    1
  mmap2                            1
  comm_exec                        1
  ksymbol                          1
  bpf_event                        1
  { wakeup_events, wakeup_watermark } 1
------------------------------------------------------------
sys_perf_event_open: pid 1906342  cpu 0  group_fd -1  flags 0x8 = 29
sys_perf_event_open: pid 1906342  cpu 1  group_fd -1  flags 0x8 = 31
sys_perf_event_open: pid 1906342  cpu 2  group_fd -1  flags 0x8 = 32
sys_perf_event_open: pid 1906342  cpu 3  group_fd -1  flags 0x8 = 33
sys_perf_event_open: pid 1906342  cpu 4  group_fd -1  flags 0x8 = 34
sys_perf_event_open: pid 1906342  cpu 5  group_fd -1  flags 0x8 = 35
sys_perf_event_open: pid 1906342  cpu 6  group_fd -1  flags 0x8 = 36
sys_perf_event_open: pid 1906342  cpu 7  group_fd -1  flags 0x8 = 37
------------------------------------------------------------
perf_event_attr:
  type                             2 (PERF_TYPE_TRACEPOINT)
  size                             136
  config                           0x16d (raw_syscalls:sys_exit)
  { sample_period, sample_freq }   1
  sample_type                      IP|TID|TIME|ID|CPU|PERIOD|RAW
  read_format                      ID|LOST
  disabled                         1
  inherit                          1
  sample_id_all                    1
  { wakeup_events, wakeup_watermark } 1
------------------------------------------------------------
sys_perf_event_open: pid 1906342  cpu 0  group_fd -1  flags 0x8 = 38
sys_perf_event_open: pid 1906342  cpu 1  group_fd -1  flags 0x8 = 39
sys_perf_event_open: pid 1906342  cpu 2  group_fd -1  flags 0x8 = 40
sys_perf_event_open: pid 1906342  cpu 3  group_fd -1  flags 0x8 = 41
sys_perf_event_open: pid 1906342  cpu 4  group_fd -1  flags 0x8 = 42
sys_perf_event_open: pid 1906342  cpu 5  group_fd -1  flags 0x8 = 43
sys_perf_event_open: pid 1906342  cpu 6  group_fd -1  flags 0x8 = 44
sys_perf_event_open: pid 1906342  cpu 7  group_fd -1  flags 0x8 = 45
------------------------------------------------------------
perf_event_attr:
  type                             1 (PERF_TYPE_SOFTWARE)
  size                             136
  config                           0xa (PERF_COUNT_SW_BPF_OUTPUT)
  { sample_period, sample_freq }   1
  sample_type                      IP|TID|TIME|ID|CPU|PERIOD|RAW
  read_format                      ID|LOST
  disabled                         1
  sample_id_all                    1
  { wakeup_events, wakeup_watermark } 1
------------------------------------------------------------
sys_perf_event_open: pid 1906342  cpu 0  group_fd -1  flags 0x8 = 46
sys_perf_event_open: pid 1906342  cpu 1  group_fd -1  flags 0x8 = 47
sys_perf_event_open: pid 1906342  cpu 2  group_fd -1  flags 0x8 = 48
sys_perf_event_open: pid 1906342  cpu 3  group_fd -1  flags 0x8 = 49
sys_perf_event_open: pid 1906342  cpu 4  group_fd -1  flags 0x8 = 50
sys_perf_event_open: pid 1906342  cpu 5  group_fd -1  flags 0x8 = 51
sys_perf_event_open: pid 1906342  cpu 6  group_fd -1  flags 0x8 = 52
sys_perf_event_open: pid 1906342  cpu 7  group_fd -1  flags 0x8 = 53
vmlinux BTF loaded

tracepoint: raw_syscalls:sys_enter
tracepoint: raw_syscalls:sys_exit
[no output, ignore this] software: PERF_COUNT_SW_BPF_OUTPUT

without BPF works (make O=/tmp/perf DEBUG=1 NO_LIBBPF=0)

this makes double instances work for me:
goto skip_augmentation;
augmented_raw_syscalls_bpf__attach(trace.skel);
trace__add_syscall_newtp(&trace);

i.e. don't attach the bpf program, it works

the comment is introduced in:
e87c6bc3852b bpf: permit multiple bpf attachments for a single perf event

ret = BPF_PROG_RUN_ARRAY_CHECK(call->prog_array, ctx, BPF_PROG_RUN);
bpf_prog_array_valid

commit 055eb95533273bc334794dbc598400d10800528f
Author: Stanislav Fomichev <sdf@fomichev.me>
Date:   Thu Apr 14 09:12:33 2022 -0700

this makes BPF_PROG_RUN_ARRAY -> bpf_prog_run_array

fb7dd8bca0139fd73d3f4a6cd257b11731317ded
e87c6bc3852b981e71c757be20771546ce9f76f3


this commit:
commit 7d08c2c9117113fee118487425ed55efa50cbfa9
Author: Andrii Nakryiko <andrii@kernel.org>
Date:   Sun Aug 15 00:05:55 2021 -0700
make this:
ret = BPF_PROG_RUN_ARRAY_CHECK(call->prog_array, ctx, BPF_PROG_RUN);
into this:
ret = BPF_PROG_RUN_ARRAY(call->prog_array, ctx, bpf_prog_run);


zhao dao le!

static void perf_syscall_exit(void *ignore, struct pt_regs *regs, long ret)

