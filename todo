[]
perf trace: Allocate arg_fmt only for traced syscalls

perf $ sudo ./perf trace -e futex -p 544404 --max-events=1
building arg_fmt for syscall futex
extra number
building arg_fmt for syscall accept
extra number
building arg_fmt for syscall accept4
extra number
building arg_fmt for syscall access
extra number
building arg_fmt for syscall acct
extra number
building arg_fmt for syscall add_key
extra number
building arg_fmt for syscall adjtimex

[]
Also, use in enum's test: 
if [ ! -f /sys/kernel/btf/vmlinux ]

[]
Should there be some type of string mismatch printing the actual output and the
desired output/format? 
check_string(string, format)

[]
trace_test_string() {
  echo "Testing perf trace's string augmentation"
  output="trace_output"
  ./perf trace -e renameat* --max-events=1 -- mv ${file1} ${file2} > $output
  if ! cat $output | grep -q -E "^mv/[0-9]+ renameat(2)?\(.*, \"${file1}\", .*, \"${file2}\", .*\) += +[0-9]+$"
  then
    echo "String augmentation test failed"
    err=1
  fi
}

test child forked, pid 18289
Checking if vmlinux BTF exists
Testing perf trace's string augmentation
:18326/18326 renameat2(CWD, "/tmp/file1_8yca", CWD, "/tmp/file2_8yca", NOREPLACE) = 0

there is an extra 'mv'

[]
comment
		 * The reason is that we call machine__findnew_thread within
		 * thread__init_maps to find the thread leader and that would
		 * screwed the rb tree.

[]
delete one of the two functions
static inline int augmented__output(void *ctx, struct augmented_args_payload *args, int len)
{
	/* If perf_event_output fails, return non-zero so that it gets recorded unaugmented */
	return bpf_perf_event_output(ctx, &__augmented_syscalls__, BPF_F_CURRENT_CPU, args, len);
}

static inline int augmented__beauty_output(void *ctx, void *data, int len)
{
	return bpf_perf_event_output(ctx, &__augmented_syscalls__, BPF_F_CURRENT_CPU, data, len);
}

[]
remove temporary files for trace record replay test

perf trace record -o ${file} sleep 1 || exit 1
if ! perf trace -i ${file} 2>&1 | grep nanosleep; then
	echo "Failed: cannot find *nanosleep syscall"
+	rm -rf ${file}
	exit 1
fi

[]
fix task filtering

[]
the second 'struct' keyword has spaces instead of tabs
struct thread_trace {
	u64		  entry_time;
	bool		  entry_pending;
	unsigned long	  nr_events;
	unsigned long	  pfmaj, pfmin;
	char		  *entry_str;
	double		  runtime_ms;
	size_t		  (*ret_scnprintf)(char *bf, size_t size, struct syscall_arg *arg);
        struct {
		unsigned long ptr;
		short int     entry_str_pos;
		bool	      pending_open;
		unsigned int  namelen;
		char	      *name;
	} filename;
	struct {
		int	      max;
		struct file   *table;
	} files;

	struct hashmap *syscall_stats;
};

